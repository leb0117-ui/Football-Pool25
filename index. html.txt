<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Snacks Worksheet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            padding: 2rem;
        }
        .worksheet-container {
            max-width: 1000px;
            margin: auto;
            background-color: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 2rem;
        }
        .form-section {
            flex: 2;
        }
        .list-section {
            flex: 1;
            padding-left: 1rem;
            border-left: 2px solid #e5e7eb;
        }
        input[type="text"], textarea {
            @apply block w-full p-2 border-2 border-gray-300 rounded-md focus:border-blue-500 focus:outline-none transition-colors duration-300;
        }
        table input[type="text"] {
            border: none;
            padding: 0;
            background-color: transparent;
        }
        label {
            @apply font-semibold text-gray-700 mt-4 mb-1 block;
        }
        .section-title {
            @apply text-2xl font-bold text-gray-800 mb-2;
        }
        .subsection-title {
            @apply text-lg font-semibold text-gray-600 mb-1;
        }
        hr {
            @apply my-6 border-gray-300;
        }
        .button {
            @apply px-4 py-2 rounded-lg font-semibold transition-colors duration-300;
        }
        .button-primary {
            @apply bg-blue-500 text-white hover:bg-blue-600;
        }
        .button-secondary {
            @apply bg-gray-300 text-gray-800 hover:bg-gray-400;
        }
        .button-danger {
            @apply bg-red-500 text-white hover:bg-red-600;
        }
    </style>
</head>
<body class="bg-gray-100 p-8">

    <div class="worksheet-container">
        <div class="form-section">
            <h1 class="text-3xl font-bold text-center text-gray-900 mb-2">School Store "Smart Snacks" Worksheet üçé</h1>
            <p class="text-gray-500 text-center mb-6">
                Logged in as: <span id="userIdDisplay" class="font-mono text-xs text-gray-400">Loading...</span>
            </p>
            <p class="text-gray-600 mb-6 text-center">
                Use this worksheet to determine if a food item from Gordon Food Service (GFS) meets the "Smart Snacks" criteria for sale in your school store.
            </p>

            <div id="loadingIndicator" class="text-center text-blue-500 mb-4" style="display: none;">
                Loading worksheets...
            </div>
            
            <button id="newEntryBtn" class="button button-primary w-full mb-6">Start a New Worksheet</button>

            <form id="worksheetForm">
                <section class="mb-8">
                    <h2 class="section-title">Part 1: Product Information</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                        <div>
                            <label for="studentName">Student Name:</label>
                            <input type="text" id="studentName" name="studentName" placeholder="Enter your name">
                        </div>
                        <div>
                            <label for="date">Date:</label>
                            <input type="text" id="date" name="date" placeholder="Enter today's date">
                        </div>
                    </div>

                    <div class="mt-6">
                        <label for="productName">1. Product Name:</label>
                        <input type="text" id="productName" name="productName" placeholder="Enter the product name">
                    </div>

                    <div class="mt-4">
                        <label for="productNumber">2. GFS Product Number (if available):</label>
                        <input type="text" id="productNumber" name="productNumber" placeholder="Enter the product number">
                    </div>

                    <div class="mt-4">
                        <label for="foodCategory">3. Food Category (e.g., snack, beverage, entree):</label>
                        <input type="text" id="foodCategory" name="foodCategory" placeholder="Enter the food category">
                    </div>

                    <div class="mt-4">
                        <label for="servingSize">4. Serving Size:</label>
                        <input type="text" id="servingSize" name="servingSize" placeholder="Enter the serving size">
                    </div>
                </section>

                <hr>

                <section class="mb-8">
                    <h2 class="section-title">Part 2: Using the Smart Snacks Calculator</h2>
                    <p class="text-gray-600 mb-4">
                        Find the Nutrition Facts label for your product online. Use the <a href="https://www.healthiergeneration.org/smartsnacks" target="_blank" class="text-blue-500 hover:underline font-semibold">Smart Snacks Product Calculator</a>.
                    </p>

                    <div class="overflow-x-auto">
                        <table class="w-full table-auto border-collapse border border-gray-300 rounded-md">
                            <thead>
                                <tr class="bg-gray-200">
                                    <th class="border border-gray-300 px-4 py-2 text-left text-sm font-semibold text-gray-700">Nutrition Fact</th>
                                    <th class="border border-gray-300 px-4 py-2 text-left text-sm font-semibold text-gray-700">Value from Product Label</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Calories</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="calories" name="calories"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Total Fat</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="totalFat" name="totalFat"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Saturated Fat</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="saturatedFat" name="saturatedFat"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Trans Fat</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="transFat" name="transFat"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Sodium</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="sodium" name="sodium"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Total Sugars</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="totalSugars" name="totalSugars"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Protein</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="protein" name="protein"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Fiber</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="fiber" name="fiber"></td>
                                </tr>
                                <tr>
                                    <td class="border border-gray-300 px-4 py-2 font-medium">Grain Type (if applicable)</td>
                                    <td class="border border-gray-300 px-4 py-2"><input type="text" id="grainType" name="grainType"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>

                <hr>

                <section>
                    <h2 class="section-title">Part 3: Analysis and Decision</h2>

                    <div class="mt-4">
                        <p class="subsection-title">1. Is this product a "Smart Snack"?</p>
                        <div class="flex items-center space-x-4 mt-2">
                            <label class="flex items-center">
                                <input type="radio" id="smartSnackYes" name="smartSnack" value="yes" class="form-radio text-blue-600">
                                <span class="ml-2">YES</span>
                            </label>
                            <label class="flex items-center">
                                <input type="radio" id="smartSnackNo" name="smartSnack" value="no" class="form-radio text-blue-600">
                                <span class="ml-2">NO</span>
                            </label>
                        </div>
                    </div>

                    <div class="mt-6">
                        <p class="subsection-title">2. Based on the calculator's results, what criteria did the product meet or fail?</p>
                        <p class="text-sm text-gray-500 mb-2">*(For example: "The product failed because it had too much saturated fat," or "The product met the criteria because it was a whole-grain product with low sodium.")*</p>
                        <textarea id="criteria" name="criteria" rows="3" class="mt-1"></textarea>
                    </div>

                    <div class="mt-6">
                        <p class="subsection-title">3. Would you recommend this product for the school store?</p>
                        <div class="flex items-center space-x-4 mt-2">
                            <label class="flex items-center">
                                <input type="radio" id="recommendationYes" name="recommendation" value="yes" class="form-radio text-blue-600">
                                <span class="ml-2">YES</span>
                            </label>
                            <label class="flex items-center">
                                <input type="radio" id="recommendationNo" name="recommendation" value="no" class="form-radio text-blue-600">
                                <span class="ml-2">NO</span>
                            </label>
                        </div>
                    </div>

                    <div class="mt-6">
                        <p class="subsection-title">4. Explain your recommendation in a short paragraph.</p>
                        <p class="text-sm text-gray-500 mb-2">*(Consider factors like taste, student interest, and the "Smart Snack" status.)*</p>
                        <textarea id="explanation" name="explanation" rows="4" class="mt-1"></textarea>
                    </div>

                    <div class="flex justify-end gap-4 mt-8">
                        <button type="button" id="deleteBtn" class="button button-danger" style="display: none;">Delete</button>
                        <button type="submit" id="saveBtn" class="button button-primary">Save Worksheet</button>
                    </div>
                </section>
            </form>
        </div>

        <div class="list-section">
            <h2 class="section-title text-center">My Saved Worksheets</h2>
            <div id="worksheetList" class="space-y-4 mt-6">
                <!-- Saved worksheets will be populated here -->
                <p class="text-center text-gray-500" id="noWorksheetsText">No worksheets saved yet.</p>
            </div>
        </div>

    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs, serverTimestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Set Firebase log level for debugging
        setLogLevel('debug');

        // Global variables for Firebase configuration and app ID
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
firebaseConfig
        // --- Firebase Initialization ---
        let app, db, auth, userId;
        let currentDocId = null;

        // UI elements
        const form = document.getElementById('worksheetForm');
        const worksheetListDiv = document.getElementById('worksheetList');
        const deleteBtn = document.getElementById('deleteBtn');
        const newEntryBtn = document.getElementById('newEntryBtn');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const saveBtn = document.getElementById('saveBtn');
        const noWorksheetsText = document.getElementById('noWorksheetsText');

        // Handles data from the form
        const getFormData = () => {
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            data.smartSnack = document.querySelector('input[name="smartSnack"]:checked')?.value || null;
            data.recommendation = document.querySelector('input[name="recommendation"]:checked')?.value || null;
            return data;
        };

        // Populates the form with data from a saved entry
        const populateForm = (data, docId) => {
            document.getElementById('studentName').value = data.studentName || '';
            document.getElementById('date').value = data.date || '';
            document.getElementById('productName').value = data.productName || '';
            document.getElementById('productNumber').value = data.productNumber || '';
            document.getElementById('foodCategory').value = data.foodCategory || '';
            document.getElementById('servingSize').value = data.servingSize || '';
            document.getElementById('calories').value = data.calories || '';
            document.getElementById('totalFat').value = data.totalFat || '';
            document.getElementById('saturatedFat').value = data.saturatedFat || '';
            document.getElementById('transFat').value = data.transFat || '';
            document.getElementById('sodium').value = data.sodium || '';
            document.getElementById('totalSugars').value = data.totalSugars || '';
            document.getElementById('protein').value = data.protein || '';
            document.getElementById('fiber').value = data.fiber || '';
            document.getElementById('grainType').value = data.grainType || '';
            document.getElementById('criteria').value = data.criteria || '';
            document.getElementById('explanation').value = data.explanation || '';

            if (data.smartSnack) document.querySelector(`input[name="smartSnack"][value="${data.smartSnack}"]`).checked = true;
            if (data.recommendation) document.querySelector(`input[name="recommendation"][value="${data.recommendation}"]`).checked = true;

            currentDocId = docId;
            deleteBtn.style.display = 'inline-block';
            saveBtn.textContent = 'Update Worksheet';
        };

        // Clears the form for a new entry
        const clearForm = () => {
            form.reset();
            currentDocId = null;
            deleteBtn.style.display = 'none';
            saveBtn.textContent = 'Save Worksheet';
        };

        // Listen for new entry button click
        newEntryBtn.addEventListener('click', clearForm);

        // Listen for form submission (save/update)
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const data = getFormData();
            try {
                if (currentDocId) {
                    await setDoc(doc(db, `artifacts/${appId}/users/${userId}/smart_snacks`, currentDocId), {
                        ...data,
                        updatedAt: serverTimestamp()
                    });
                } else {
                    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/smart_snacks`), {
                        ...data,
                        createdAt: serverTimestamp(),
                        updatedAt: serverTimestamp()
                    });
                    clearForm(); // Clear form after saving a new one
                }
                console.log("Worksheet saved successfully!");
            } catch (error) {
                console.error("Error saving document: ", error);
            }
        });

        // Listen for delete button click
        deleteBtn.addEventListener('click', async () => {
            if (currentDocId) {
                try {
                    await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/smart_snacks`, currentDocId));
                    clearForm();
                    console.log("Worksheet deleted successfully!");
                } catch (error) {
                    console.error("Error deleting document: ", error);
                }
            }
        });

        // --- Firestore Real-time Listener ---
        const setupFirestoreListener = () => {
            const q = collection(db, `artifacts/${appId}/users/${userId}/smart_snacks`);
            onSnapshot(q, (snapshot) => {
                worksheetListDiv.innerHTML = ''; // Clear the list
                loadingIndicator.style.display = 'none';

                if (snapshot.empty) {
                    noWorksheetsText.style.display = 'block';
                    return;
                }
                noWorksheetsText.style.display = 'none';

                snapshot.forEach((doc) => {
                    const data = doc.data();
                    const listItem = document.createElement('div');
                    listItem.className = 'bg-gray-100 p-4 rounded-lg cursor-pointer hover:bg-gray-200 transition-colors duration-200';
                    listItem.innerHTML = `
                        <h3 class="font-bold">${data.productName || 'Untitled Worksheet'}</h3>
                        <p class="text-sm text-gray-600">${data.date || 'No Date'}</p>
                    `;
                    listItem.addEventListener('click', () => populateForm(data, doc.id));
                    worksheetListDiv.appendChild(listItem);
                });
            }, (error) => {
                console.error("Error listening to Firestore: ", error);
            });
        };

        // --- Auth State Listener and App Initialization ---
        const initializeAppAndAuth = () => {
            if (Object.keys(firebaseConfig).length > 0) {
                app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);
            } else {
                console.error("Firebase config is missing.");
                loadingIndicator.textContent = "Error: Firebase configuration missing.";
                return;
            }

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    userIdDisplay.textContent = userId;
                    loadingIndicator.style.display = 'none';
                    setupFirestoreListener();
                } else {
                    try {
                       await signInAnonymously(auth);
                        } else {
                           await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Error during authentication: ", error);
                        userIdDisplay.textContent = 'Auth failed';
                        loadingIndicator.textContent = "Authentication failed. Please try again.";
                    }
                }
            });
        };

        window.onload = initializeAppAndAuth;

    </script>
</body>
</html>
